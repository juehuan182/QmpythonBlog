"""
Django settings for QmpythonBlog project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# sys.path.insert(0,os.path.join(BASE_DIR,'apps'))

# print(__file__)  # 所在文件的绝对路径
# print(os.path.abspath(__file__))  # 获得文件当前路径
# print(os.path.dirname(os.path.abspath(__file__)))  # 获得文件父目录
# print(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'dlnb+jaj$h=f&s5(m$8gky&^tgjobk5b204qvfi)0j#xpnq#-7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # 测试环境中打开调试模式，能够显示详细的报错信息，生产环境改为False避免暴露项目内部信息

#允许访问的客户端的地址, “*”表示的就是任意的ip地址
if DEBUG:
    ALLOWED_HOSTS = ["*"]
else:
    ALLOWED_HOSTS = ["www.qmpython.com", "47.107.69.21", "127.0.0.1"]  # 在 DEBUG 为 True 时，其值可以为空。当部署到生产环境中时，要把主域名填写到这里，才能通过域名访问到本网站。


# 指定用户模型为我们自己创建的Account模型，告诉Django使用users下的Account用户类型，允许通过修改AUTH_USER_MODEL 设置覆盖默认的User模型，其值引用一个自定义的模型。
AUTH_USER_MODEL = 'user.Account'

# 自定义用户验证,告诉Django需要使用哪些Backends 对用户的凭据信息进行验证
AUTHENTICATION_BACKENDS = (
    'user.views.AccountBackend',
)

# 登录验证，如果没有登录成功，则跳转至此配置的url
LOGIN_URL = '/user/login/'

# Application definition

# app应用引用
INSTALLED_APPS = [
    #'django.contrib.admin', # 使用自定义admin需要把django自带的删除
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'user.apps.UserConfig',
    'article',
    'doc',
    'shop',
    'admin',
    'pure_pagination', # 添加第三方分页的模块,这个模块是在django的分页功能上封装的
    'haystack', # 搜索
    'django.contrib.sitemaps', # 站点地图
    'rest_framework', # DRF

    'django_filters',  #过滤
    'api',
    'corsheaders', # 解决跨域问题
]

# 中间件，在新版本django中,中间件的key值由MIDDLEWARE_CLASSES变更为MIDDLEWARE
# 在新版本django中SessionAuthenticationMiddleware这个中间件不需要了。
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # 建议加在第一行，必须在CsrfViewMiddleware之前
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # 全局开启csrf防护，生成csrf cookie和判断csrf token是否正确
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'util.StatFlowMiddleware.StatFlowMiddleware', # 添加自定义中间件
]

#设置全局跨域
CORS_ORIGIN_ALLOW_ALL = True


ROOT_URLCONF = 'QmpythonBlog.urls'

TEMPLATES = [
    {
        # 引擎，就是Django自带的模板渲染模板
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 模板文件的位置，并且该目录的名称 templates 也在这里定义了，
        # BASE_DIR表示本项目的根目录 ，
        # 用 os.path.join（）函数将两者连接起来，即模板目 录的位置是相对项 目根目录的 templates 目录一－.／templates
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 拼接系统路径时一定要使用 os.path.join() 函数
        # app内部的templates是否启用
        # 这是为了兼容老版本，老版本每个app应用有templates，默认为True即可
        'APP_DIRS': True,
        # 模板中间件
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'QmpythonBlog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

if 0:
    DB_USER = "root"
    DB_PASSWORD = "qwe123"
    DB_NAME = "CainiaoBlog_DB"
else:
    DB_USER = "qmpython"
    DB_PASSWORD = "qmpython@Lei"
    DB_NAME = "qmpython"



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        'HOST': "localhost",  # 你的数据地址，localhost代表本地
        # 端口，数据库的默认端口一般是3306，如果就算采用虚拟机NAT方式，此端口是指虚拟机上mysql端口，
        # 因为连接数据库前用ssh连接了，后面操作就相当于在虚拟机环境本地连接
        "PORT": 3306,
        "USER": DB_USER,  # 用户名
        "PASSWORD": DB_PASSWORD,  # 密码
        "NAME": DB_NAME  # 库名
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/


# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'  # 改为简体中文，主要针对admin页面

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'  # 用于存放本地时区信息，默认值为UTC，意思为采用国际标准时间“格林尼治时间”。中国处于东八区，官方文档上有两个取值“Asia/Shanghai”和“Asia/Chongqing”(没有北京).

USE_I18N = True

USE_L10N = True

# USE_TZ = True
USE_TZ = True  # 修改时区确认,默认是Ture，时间是utc时间，由于我们要用本地时间，所用手动修改为false!
# 用于控制是否使用UTC时间(True and False)。如果设置为False，则使用本地时间。
# 为了保证世界各地时间统一性，可以在数据库中使用UTC时间，根据需求转换成相应时区时间。
# 为解决这个此类问题，在代码和数据库中统一使用 UTC 时间，仅在与最终用户进行交互时使用本地时间是一个很好的办法

# 如果修改设置为USE_TZ=True与TIME_ZONE = 'Asia/Shanghai'，用datetime.datetime.now()获取的时间由于不带时区，
# django会把这个时间当成Asia/Shanghai时间，即东八区时间，然后django会把这个时间转成带时区UTC时间存储到数据库中去，
# 而读的时候直接按UTC时间读出来，这就是网上很多人遇到的存储到数据库中的时间比本地时间会小8个小时的原因。
# 如果设置了USE_TZ=True之后，model里面认为DateTimeField使用UTC时间（带时区的时间），
# 这时用datetime.datetime.now()获取的时间是不带时区的就会报这个问题。
# https://blog.csdn.net/qq_37049781/article/details/79347278

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/


#静态文件存储，一般是我们的JS、css、系统的图片文件等。
STATIC_URL = '/static/'     #这个“static”指访问静态文件，引入时用的别名
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # 这里指静态文件保存哪个路径,这个“static”指目录名

# if not DEBUG:
#     STATIC_ROOT = '/root/src/www/QmpythonBlog/static'  # 指定收集的静态文件的路径

'''
STATIC_ROOT 是在部署静态文件时(pyhtonmanage.pycollectstatic)所有的静态文静聚合的目录,STATIC_ROOT要写成绝对地址,
那么STATIC_ROOT 为 /home/mysite/collect_static/ 
当部署项目时,在终端输入:
python manage.py collectstatic 会将项目中所使用的静态文件收集到STATIC_ROOT
1
django会把所有的static文件都复制到STATIC_ROOT文件夹下
STATICFILES_DIRS告诉django,首先到STATICFILES_DIRS里面寻找静态文件,其次再到各个app的static文件夹
里面找(注意, django查找静态文件是惰性查找,查找到第一个,就停止查找了)
STATIC_URL 则代表用户通过URL来访问这个本地地址的URL,STATIC_URL为”/static/”时候，通过http://127.0.0.1/static/***就可以访问相关的静态文件了。
'''

# 媒体文件存储，一般是用户上传的图片、文件数据，或大的文件或视频等等
MEDIA_URL = '/media/'  # 作为公用URL，这个是在浏览器上访问该上传文件的url的前缀
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 上传文件在服务器中的基本路径。 join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。
'''
这么设置的前提是要在settings设置MEDIA_URL = '/media/'
这样以 / media / 开头的URL就会被导向django.views.static.serve了，同时从数据库拿出来的url也会自动在前面加上 / media /
'''
# 添加CKEditor文件上传路径。再此之前需要设置MEDIA_URL和MEDIA_ROOT
CKEDITOR_UPLOAD_PATH = "content/"  # 注意只有右侧带有“/”

# 进行ckeditor相关设置
CKEDITOR_IMAGE_BACKEND = 'pillow'  # 用于生成图片缩略图，在编辑器里浏览上传的图片，使用pip安装 pillow

# CKEDITOR_ALLOW_NONIMAGE_FILES = False #不允许非图片文件上传，默认为True
# CKEDITOR_BROWSE_SHOW_DIRS = True #在编辑器里浏览上传的图片时，图片会以路径分组，日期排序
# CKEDITOR_RESTRICT_BY_USER = True #限制用户浏览图片的权限，只能浏览自己上传的图片，图片会传到以用户名命名的文件夹下，超级管理员依旧可以看所有图片

#
# CKEDITOR_CONFIGS = {
#     'custom_config': {
#         'language': 'zh-hans',
#         'width': 'auto',
#         # 'height': '500',
#         'image_previewText': ' ',
#         'tabSpaces': 4,
#         'toolbar': 'Custom',
#         # 添加按钮在这里
#         'toolbar_Custom': [
#             ['Bold', 'Italic', 'Underline', 'Format', 'RemoveFormat'],
#             ['NumberedList', 'BulletedList'],
#             ['Blockquote', 'CodeSnippet'],  # 代码块工具
#             ['Image', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar'],
#             ['Font', 'FontSize'],
#             ['TextColor', 'BGColor'],
#             ['Link', 'Unlink'],
#             ['Maximize']
#         ],
#         'extraPlugins': ','.join(
#             [
#                 # your extra plugins here
#                 'div',
#                 'autolink',
#                 'autoembed',
#                 'embedsemantic',
#                 'autogrow',
#                 # 'devtools',
#                 # 'widget',
#                 # 'lineutils',
#                 'clipboard',
#                 'dialog',
#                 'dialogui',
#                 'elementspath',
#                 'codesnippet',
#                 'uploadimage',
#             ]),
#
#     },
#     'special': {
#         'language': 'zh-hans',
#         'toolbar': 'Custom',
#         'skin': 'moono',
#         'width': '800',
#         'height': '250',
#         'toolbar_Custom': [['Bold', 'Italic', 'Underline', 'Format', 'RemoveFormat'],
#                            ['NumberedList', 'BulletedList'],
#                            ['Blockquote', 'CodeSnippet'],
#                            ['Link', 'Unlink'],
#                            ['Maximize']],
#
#     }
# }

# 设置项是否开启URL访问地址后面不为/跳转至带有/的路径
# APPEND_SLASH = False

# 注册有效期天数
CONFIRM_DAYS = 7

# Django 为开发环境下发送邮件提供了一些方便的 Backends 来模拟真实邮件的发送，例如直接发送邮件到终端（）
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# 生产环境下通常需要使用真实的邮件发送服务器
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"  # 确保使用的是smtp
# 使用新浪来发送邮件
# EMAIL_HOST = "smtp.sina.com"
# EMAIL_PORT = 25
# EMAIL_HOST_USER = "juehuan182@sina.com"
# EMAIL_HOST_PASSWORD = "5724826lei"
# EMAIL_USE_TIS = False
# EMAIL_FROM = "juehuan182@sina.com"

# #
# 使用QQ来发送邮件
EMAIL_HOST = "smtp.qq.com"  # SMTP服务器/发送务服务器
EMAIL_PORT = 465  # SSL # 第三种配置方式
# EMAIL_PORT = 587 # TSL # 第二种配置方式
# EMAIL_PORT = 25 #第一种配置方式
EMAIL_HOST_USER = "1328500761@qq.com"
# 授权码
EMAIL_HOST_PASSWORD = "ktxduqebuirngfif"
# EMAIL_USE_TLS = True #第一种配置方式 # 第二种配置方式
EMAIL_USE_SSL = True  # 第三种配置方式
EMAIL_FROM = "qmpython@qq.com"

#
# # 163 SMTP 配置 要用ssl方式
# EMAIL_HOST = "smtp.163.com"
# EMAIL_PORT = 465  # 端口号
# #发送邮件的邮箱
# EMAIL_HOST_USER = "juehua182@163.com"
# #在邮箱中设置的客户端授权密码
# EMAIL_HOST_PASSWORD = "5724826lei"
# EMAIL_USE_SSL = True
# EMAIL_USE_TLS = False
# #收件人看到的发件人
# EMAIL_FROM = EMAIL_HOST_USER

# 一页显示多少条记录
ONE_PAGE_COUNT = 15

# 如果需要做分页的设置,需要设置成官网里面的,可以把10改成3,把2改成1,参考https://github.com/jamespacileo/django-pure-pagination.git
PAGINATION_SETTINGS = {
    'PAGE_RANGE_DISPLAYED': 3,  # 显示当前页面的相邻的页面数（默认值为10）,例当前页为10，设置为2时，则为 1 2 3 4 5
    'MARGIN_PAGES_DISPLAYED': 2,  # 将显示的第一页和最后一页相邻的页数（默认为2）
    'SHOW_FIRST_PAGE_WHEN_INVALID': True, # 无效页面时，显示第一页而不是404页面
}

# 配置 django-redis 作为缓存
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # "PASSWORD": "密码", #如何redis设置了密码，则需要在这配置
        }
    },
    "verify_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },

    "history": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },


}

# 默认django将session保存到数据库中的django_session表中，如果需要将session存储到缓存中，则需要设置
#
# # 将用户的session保存到redis中
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# # 指定缓存redis的别名
# SESSION_CACHE_ALIAS = "session"


# 使用python-memcached的配置
# 运行在localhost (127.0.0.1) port 11211
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#         'LOCATION': '127.0.0.1:11211',
#     }
# }



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logback/blog.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'qmpython': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}





REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated user.
    # 权限认证
    'DEFAULT_PERMISSION_CLASSES': (
        # 使用django标准的 'django.contrib.auth'权限，未认证的用户只读权限
        #'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
        #'rest_framework.permissions.IsAuthenticated',
    ),

    # 分页
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # LimitOffsetPagination 分页风格
    'PAGE_SIZE': 3,  # 每页多少条记录
    #'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),

    # 身份验证
    'DEFAULT_AUTHENTICATION_CLASSES': (
            'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework.authentication.BasicAuthentication',
        ),

}

import datetime
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1), # 指明token的有效期
}



#Oauth

#github
GITHUB_CLIENT_ID = 'cd1a29b306bdfa43cbbc'
GITHUB_CLIENT_SECRET = 'a1043edfdaa7bbff196541dd21795db949320431'
GITHUB_CALLBACK_URL = 'http://www.qmpython.com/user/githubCallback'  #授权回调地址

# 入口重定向 :https://github.com/login/oauth/authorize?client_id=yourclientid&redirect_uri=yourredirect_uri

#回调页面中处理,根据code返回获取access_token接口：https://github.com/login/oauth/access_token


#QQ
QQ_APP_ID = '101518870'
QQ_APP_KEY = 'd80cc8d2e656acbd8b90cf6a71c58f38'
QQ_CALLBACK_URL = 'http://www.qmpython.com/user/qqCallback'    #填写你的回调地址
#https://blog.csdn.net/a992970569/article/details/82107899


#新浪微博
WEIBO_APP_KEY = '3372455299'
WEIBO_APP_SECRET = '54daa0b44a2f346246697f5dc1927d80'
WEIBO_CALLBACK_URL = 'http://www.qmpython.com/user/weiboCallback'    #填写你的回调地址



ELASTICSEARCH_DSL = {
    'default': {
        'hosts': '127.0.0.1:8002'
    },
}

# Haystack
HAYSTACK_CONNECTIONS = {
    'default': {
        #  使用elasticsearch引擎
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://127.0.0.1:8002/',  # 此处为elasticsearch运行的服务器ip地址，端口号默认为9200
        'INDEX_NAME': 'qmpython_haystack_index',  # 指定elasticsearch建立的索引库的名称
    },
}

# 设置每页显示的数据量
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 10
# 当数据库改变时，会自动更新索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'


# 百度VOD
BAIDU_CLOUD_USER_ID = ''
BAIDU_CLOUD_USER_KEY = ''



# FastDFS地址
FASTDFS_SERVER_DOMAIN = 'http://www.qmpython.com:8888/'
FASTDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'util/fastdfs/client.conf')



# 从七牛云"个人中心>密钥管理"中获取自己的 Access Key 和 Secret Key
QI_NIU_ACCESS_KEY = 'mHXibYhu-xcOahyvizWNWTkAmJPiUm419zOekf70'    # '你自己七牛云上的AK'
QI_NIU_SECRET_KEY = 'VDm0lXqcRIs-Bguv1-VUdHG4DJoyEFj4N6KfzSMg'    # '你自己七牛云上的SK'
QI_NIU_BUCKET_NAME = 'qmpython'   # '你自己在七牛云上创建的存储空间名'